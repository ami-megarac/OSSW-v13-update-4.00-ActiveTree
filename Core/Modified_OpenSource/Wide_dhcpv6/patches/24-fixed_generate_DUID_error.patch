diff -Naur wide-dhcpv6-20080615_ori/common.c wide-dhcpv6-20080615_new/common.c
--- wide-dhcpv6-20080615_ori/common.c	2021-03-25 17:09:13.457289000 +0800
+++ wide-dhcpv6-20080615_new/common.c	2021-03-25 17:06:41.846512000 +0800
@@ -96,6 +96,9 @@
 };
 #endif
 
+#define MAC_ADDR_LEN	6
+#define DUID_FILE "/conf/dhcp6c_duid"
+
 #define MAXDNAME 255
 char FqdnName[MAX_SIZE];
 int foreground;
@@ -989,125 +992,72 @@
 #endif
 }
 
-int
-get_duid(idfile, duid)
-	char *idfile;
+int get_duid(ifname, duid)
+	char *ifname;
 	struct duid *duid;
 {
 	FILE *fp = NULL;
 	u_int16_t len = 0, hwtype;
-	struct dhcp6opt_duid_type3 *dp; /* we only support the type1 DUID */
-	char tmpbuf[256];	/* DUID should be no more than 256 bytes */
-	char *iface = NULL;
-	int file_exist = 0; // if 0, DUID file isn't exist
-	if ((fp = fopen(idfile, "r")) == NULL && errno != ENOENT)
-		ddprintf(LOG_NOTICE, FNAME, "failed to open DUID file: %s",
-		    idfile);
-	if((fp = fopen(idfile, "r")) == NULL)
-		file_exist = 0;
-	else
-		file_exist = 1;
-
-	if (fp) {
-		/* decode length */
-		if (fread(&len, sizeof(len), 1, fp) != 1) {
-			ddprintf(LOG_ERR, FNAME, "DUID file corrupted");
-			goto fail;
-		}
-	} else {
-		int l;
-		if((iface=(char *)malloc(256)) == NULL)
-		{
-			ddprintf(LOG_ERR, FNAME, "failed to allocate memory");
-			goto fail;
-		}
-		char *dot={"."};
-		iface=strstr(idfile,dot);
-		if(iface!=NULL)
-		{
-			if ((l = gethwid(tmpbuf, sizeof(tmpbuf), iface+1, &hwtype)) < 0) {
-                             ddprintf(LOG_INFO, FNAME,
-                               "failed to get a hardware address");
-                           goto fail;
-                        }
-
-		}
-		else if ((l = gethwid(tmpbuf, sizeof(tmpbuf), NULL, &hwtype)) < 0) {
-			ddprintf(LOG_INFO, FNAME,
-			    "failed to get a hardware address");
-			goto fail;
-		}
-		len = l + sizeof(struct dhcp6opt_duid_type3);
+	struct dhcp6opt_duid_type3 *dp; /* we only support the type3 DUID */	
+	char tmpbuf[256] = {0};	/* DUID should be no more than 256 bytes */
+	char duid_file_ifname[256]= {0};
+	int l = 0, i = 0, retval = -1;
+	
+	if ((l = gethwid(tmpbuf, sizeof(tmpbuf), ifname , &hwtype)) < 0) {
+		goto fail;
 	}
-
+	len = l + sizeof(struct dhcp6opt_duid_type3);
+		
 	memset(duid, 0, sizeof(*duid));
 	duid->duid_len = len;
+	
 	if ((duid->duid_id = (char *)malloc(len)) == NULL) {
-		ddprintf(LOG_ERR, FNAME, "failed to allocate memory");
+		ddprintf(LOG_DEBUG, FNAME, "failed to allocate memory");
 		goto fail;
 	}
-
+	
 	/* copy (and fill) the ID */
-	if (fp) {
-		if (fread(duid->duid_id, len, 1, fp) != 1) {
-			ddprintf(LOG_ERR, FNAME, "DUID file corrupted");
-			goto fail;
-		}
+	dp = (struct dhcp6opt_duid_type3 *)duid->duid_id;
+	dp->dh6_duid1_type = htons(3); /* type 1 */
+	dp->dh6_duid1_hwtype = htons(hwtype);	
+	memcpy((void *)(dp + 1), tmpbuf, (len - sizeof(*dp)));
+ 	
+	for(i = 0 ; i < (len - sizeof(*dp)); i++){
+		//ddprintf(LOG_ERR, FNAME, "%2x ",tmpbuf[i]);
+	}
+
+        retval=snprintf(duid_file_ifname,256,"%s.%s",DUID_FILE,ifname);
+	if(retval<0||retval>256){
+		ddprintf(LOG_DEBUG, FNAME, "Warning : Buffer Truncated");
+	}
 
-		ddprintf(LOG_DEBUG, FNAME,
-		    "extracted an existing DUID from %s: %s",
-		    idfile, duidstr(duid));
-	} else {
-		u_int64_t t64;
-
-		dp = (struct dhcp6opt_duid_type3 *)duid->duid_id;
-		dp->dh6_duid1_type = htons(3); /* type 3 */
-		dp->dh6_duid1_hwtype = htons(hwtype);
-		/* time is Jan 1, 2000 (UTC), modulo 2^32 */
-		//t64 = (u_int64_t)(time(NULL) - 946684800);
-		//dp->dh6_duid1_time = htonl((u_long)(t64 & 0xffffffff));
-		memcpy((void *)(dp + 1), tmpbuf, (len - sizeof(*dp)));
-
-		ddprintf(LOG_DEBUG, FNAME, "generated a new DUID: %s",
-		    duidstr(duid));
-	}
-
-	/* save the (new) ID to the file for next time */
-	if (!fp) {
-		if ((fp = fopen(idfile, "w+")) == NULL) {
-			ddprintf(LOG_ERR, FNAME,
-			    "failed to open DUID file for save");
-			goto fail;
-		}
-		if ((fwrite(&len, sizeof(len), 1, fp)) != 1) {
-			ddprintf(LOG_ERR, FNAME, "failed to save DUID");
-			goto fail;
-		}
-		if ((fwrite(duid->duid_id, len, 1, fp)) != 1) {
-			ddprintf(LOG_ERR, FNAME, "failed to save DUID");
-			goto fail;
-		}
+	if ((fp = fopen(duid_file_ifname, "w+")) == NULL) {
+		ddprintf(LOG_DEBUG, FNAME, "failed to open DUID file for save");
+		goto fail;
+	}
 
-		ddprintf(LOG_DEBUG, FNAME, "saved generated DUID to %s",
-		    idfile);
+	if ((fwrite(&len, sizeof(len), 1, fp)) != 1) {
+		ddprintf(LOG_DEBUG, FNAME, "failed to save DUID Len");
+		goto fail;
 	}
 
-	if (fp)
-		fclose(fp);
-	if(iface && file_exist)
-		free(iface);
-	return (0);
+	if ((fwrite(duid->duid_id, len, 1, fp)) != 1) {
+		ddprintf(LOG_DEBUG, FNAME, "failed to save DUID ID");
+		goto fail;
+	}
 
-  fail:
 	if (fp)
-		fclose(fp);
-	if(iface && file_exist)
-		free(iface);
-	if (duid->duid_id) {
-		free(duid->duid_id);
-		duid->duid_id = NULL; /* for safety */
-	}
-	return (-1);
+		fclose(fp);	
+    return 0;
+
+    fail:
+		if (fp)
+			fclose(fp);
+		if (duid->duid_id) {
+			free(duid->duid_id);
+			duid->duid_id = NULL; /* for safety */
+		}		
+		return (-1);    
 }
 
 #ifdef __sun__
@@ -1248,91 +1198,36 @@
 	const char *ifname;
 	u_int16_t *hwtypep;
 {
-	struct ifaddrs *ifa, *ifap;
-#ifdef __KAME__
-	struct sockaddr_dl *sdl;
-#endif
-#ifdef __linux__
-	struct sockaddr_ll *sll;
-#endif
+	int fd;
+	struct ifreq ifr;
 	ssize_t l;
 
-#ifdef __sun__
-	if (ifname == NULL) {
-		di_node_t root;
-		struct hwparms parms;
-
-		if ((root = di_init("/", DINFOSUBTREE | DINFOMINOR |
-		    DINFOPROP)) == DI_NODE_NIL) {
-			ddprintf(LOG_INFO, FNAME, "di_init failed");
-			return (-1);
-		}
-		parms.buf = buf;
-		parms.hwtypep = hwtypep;
-		parms.retval = -1;
-		(void) di_walk_minor(root, DDI_NT_NET, DI_CHECK_ALIAS, &parms,
-		    devfs_handler);
-		di_fini(root);
-		return (parms.retval);
-	} else {
-		return (getifhwaddr(ifname, buf, hwtypep, -1));
-	}
-#endif
-
-	if (getifaddrs(&ifap) < 0)
-		return (-1);
+	memset(&ifr, 0, sizeof(ifr));
+	fd = socket(AF_INET, SOCK_DGRAM, 0);
 
-	for (ifa = ifap; ifa; ifa = ifa->ifa_next) {
-		if (ifname && strcmp(ifa->ifa_name, ifname) != 0)
-			continue;
-		if (ifa->ifa_addr == NULL)
-			continue;
-#ifdef __KAME__
-		if (ifa->ifa_addr->sa_family != AF_LINK)
-			continue;
+	ifr.ifr_addr.sa_family = AF_INET;
+	strncpy(ifr.ifr_name, ifname, IFNAMSIZ-1);
 
-		sdl = (struct sockaddr_dl *)ifa->ifa_addr;
-		if (len < 2 + sdl->sdl_alen)
-			goto fail;
-		/*
-		 * translate interface type to hardware type based on
-		 * http://www.iana.org/assignments/arp-parameters
-		 */
-		switch(sdl->sdl_type) {
-		case IFT_ETHER:
-#ifdef IFT_IEEE80211
-		case IFT_IEEE80211:
-#endif
-			*hwtypep = ARPHRD_ETHER;
-			break;
-		default:
-			continue; /* XXX */
-		}
-		ddprintf(LOG_DEBUG, FNAME, "found an interface %s for DUID",
-		    ifa->ifa_name);
-		memcpy(buf, LLADDR(sdl), sdl->sdl_alen);
-		l = sdl->sdl_alen; /* sdl will soon be freed */
-#endif
-#ifdef __linux__
-		if (ifa->ifa_addr->sa_family != AF_PACKET)
-			continue;
+	if (ioctl(fd, SIOCGIFHWADDR, &ifr) != -1) {
+#if 0
 
-		sll = (struct sockaddr_ll *)ifa->ifa_addr;
-		if (sll->sll_hatype != ARPHRD_ETHER)
-			continue;
-		*hwtypep = ARPHRD_ETHER;
-		ddprintf(LOG_DEBUG, FNAME, "found an interface %s for DUID",
-		    ifa->ifa_name);
-		memcpy(buf, sll->sll_addr, sll->sll_halen);
-		l = sll->sll_halen; /* sll will soon be freed */
+		ddprintf(LOG_ERR, FNAME, "Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n",
+                (unsigned char)ifr.ifr_hwaddr.sa_data[0],
+                (unsigned char)ifr.ifr_hwaddr.sa_data[1],
+                (unsigned char)ifr.ifr_hwaddr.sa_data[2],
+                (unsigned char)ifr.ifr_hwaddr.sa_data[3],
+                (unsigned char)ifr.ifr_hwaddr.sa_data[4],
+                (unsigned char)ifr.ifr_hwaddr.sa_data[5]);
 #endif
-		freeifaddrs(ifap);
-		return (l);
 	}
+	close(fd);
 
-  fail:
-	freeifaddrs(ifap);
-	return (-1);
+	memcpy(buf, &ifr.ifr_hwaddr.sa_data, MAC_ADDR_LEN);	
+	
+	*hwtypep = ARPHRD_ETHER;
+	l = MAC_ADDR_LEN;
+		
+	return (l);	
 }
 
 void
diff -Naur wide-dhcpv6-20080615_ori/dhcp6c.c wide-dhcpv6-20080615_new/dhcp6c.c
--- wide-dhcpv6-20080615_ori/dhcp6c.c	2021-03-25 17:09:13.472104000 +0800
+++ wide-dhcpv6-20080615_new/dhcp6c.c	2021-03-25 17:11:12.256211890 +0800
@@ -423,6 +423,7 @@
         struct duid_iface *client_if_duid=NULL;
         struct duid_iface *prev_if_duid=NULL;
 	int retval=-1;
+
 	if(iface==NULL){
 		ddprintf(LOG_DEBUG, FNAME, "Error: Blank interface");
 		return;
@@ -461,6 +462,7 @@
 {
         struct duid_iface *client_if_duid=NULL;
         int retval=-1;	
+
 	if(g_duid==NULL)
 	{
 		ddprintf(LOG_DEBUG, FNAME, "Failed to get Globlal DUID\n");
@@ -494,17 +496,10 @@
 	static struct sockaddr_in6 sa6_allagent_storage;
 	int error, on = 1,i=0,retval=-1;
 	struct ifaddrs *ifa, *ifap;
-	char *duid_file_ifname=NULL;
-	if((duid_file_ifname=(char *)malloc(256)) == NULL)
-	{
-		ddprintf(LOG_ERR, FNAME, "failed to allocate memory");
-		exit(1);
-	}	
 	int arg_count=argc;
         if (getifaddrs(&ifap) < 0)
 	{
 		ddprintf(LOG_ERR, FNAME, "getifaddrs : failed");
-		free(duid_file_ifname);
 		exit(1);
 	}
         while(i<arg_count){
@@ -513,18 +508,14 @@
                         continue;
                 if (ifa->ifa_addr == NULL)
                         continue;
-	        retval=snprintf(duid_file_ifname,256,"%s.%s",DUID_FILE,argv[i]);
-		if(retval<0||retval>256){
-			ddprintf(LOG_DEBUG, FNAME, "Warning : Buffer Truncated");
-		}
-	        if (get_duid(duid_file_ifname, &client_duid)) {
+	        if (get_duid(argv[i], &client_duid)) {
 		        ddprintf(LOG_DEBUG, FNAME, "Error : Faild to get duid by iface");
 	        }
 	        AddToList(&client_duid,argv[i]);
 	   }//For
 	   i++;
 	}//While for all arguments
-	free(duid_file_ifname);
+
 	freeifaddrs(ifap);
 
 	if (dhcp6_ctl_authinit(ctlkeyfile, &ctlkey, &ctldigestlen) != 0) {
@@ -1566,9 +1557,6 @@
 		optinfo.fqdn.fqdn_name_flag[0]=0x1;
     	optinfo.fqdn.fqdn_len=strlen(FqdnName);
     }
-	
-	
-	
 
 	/* rapid commit (in Solicit only) */
 	if (ev->state == DHCP6S_SOLICIT &&
diff -Naur wide-dhcpv6-20080615_ori/dhcp6c.h wide-dhcpv6-20080615_new/dhcp6c.h
--- wide-dhcpv6-20080615_ori/dhcp6c.h	2021-03-25 17:09:13.384390000 +0800
+++ wide-dhcpv6-20080615_new/dhcp6c.h	2021-03-25 15:04:19.466624000 +0800
@@ -33,7 +33,6 @@
 #define DHCP6C_PIDFILE "/var/run/dhcp6c.pid"
 #define DHCP6C_TIMING_CONF "/conf/dhcp6ctiming.conf"
 //#define DUID_FILE LOCALDBDIR "/dhcp6c_duid"
-#define DUID_FILE "/conf/dhcp6c_duid"
 
 extern struct dhcp6_timer *client6_timo __P((void *));
 extern int client6_start __P((struct dhcp6_if *));
