--- uboot_patch058/include/ext4fs.h	2022-01-06 17:48:51.923217858 +0800
+++ uboot/include/ext4fs.h	2022-01-06 17:57:51.621914358 +0800
@@ -117,6 +117,12 @@
 	struct blk_desc *dev_desc;
 };
 
+struct ext_block_cache {
+        char *buf;
+        lbaint_t block;
+        int size;
+};
+
 extern struct ext2_data *ext4fs_root;
 extern struct ext2fs_node *ext4fs_file;
 
@@ -153,4 +159,7 @@
 		   loff_t *actread);
 int ext4_read_superblock(char *buffer);
 int ext4fs_uuid(char *uuid_str);
+void ext_cache_init(struct ext_block_cache *cache);
+void ext_cache_fini(struct ext_block_cache *cache);
+int ext_cache_read(struct ext_block_cache *cache, lbaint_t block, int size);
 #endif
--- uboot_patch058/fs/ext4/ext4fs.c	2022-01-06 17:48:52.331217629 +0800
+++ uboot/fs/ext4/ext4fs.c	2022-01-06 17:58:27.741894038 +0800
@@ -63,14 +63,19 @@
 	char *delayed_buf = NULL;
 	char *start_buf = buf;
 	short status;
+	struct ext_block_cache cache;
 
-	if (blocksize <= 0)
-		return -1;
+	ext_cache_init(&cache);
 
 	/* Adjust len so it we can't read past the end of the file. */
 	if (len + pos > filesize)
 		len = (filesize - pos);
 
+	if (blocksize <= 0 || len <= 0) {
+		ext_cache_fini(&cache);
+		return -1;
+	}
+
 	blockcnt = lldiv(((len + pos) + blocksize - 1), blocksize);
 
 	for (i = lldiv(pos, blocksize); i < blockcnt; i++) {
@@ -255,3 +260,32 @@
 	return -ENOSYS;
 #endif
 }
+
+void ext_cache_init(struct ext_block_cache *cache)
+{
+        memset(cache, 0, sizeof(*cache));
+}
+
+void ext_cache_fini(struct ext_block_cache *cache)
+{
+        free(cache->buf);
+        ext_cache_init(cache);
+}
+
+int ext_cache_read(struct ext_block_cache *cache, lbaint_t block, int size)
+{
+        /* This could be more lenient, but this is simple and enough for now */
+        if (cache->buf && cache->block == block && cache->size == size)
+                return 1;
+        ext_cache_fini(cache);
+        cache->buf = memalign(ARCH_DMA_MINALIGN, size);
+        if (!cache->buf)
+                return 0;
+        if (!ext4fs_devread(block, 0, size, cache->buf)) {
+                ext_cache_fini(cache);
+                return 0;
+        }
+        cache->block = block;
+        cache->size = size;
+        return 1;
+}
