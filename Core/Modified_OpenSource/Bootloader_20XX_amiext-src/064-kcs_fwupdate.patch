--- uboot.old/oem/ami/fmh/cmd_fmh.c	2022-09-18 03:35:12.000000000 -0700
+++ uboot/oem/ami/fmh/cmd_fmh.c	2022-10-14 02:17:30.000000000 -0700
@@ -106,7 +106,7 @@
 extern int Disable_watchdog(void);
 #endif
 
-#ifdef CONFIG_YAFU_SUPPORT
+#ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
 extern int fwupdate(void);
 #endif
 
@@ -116,7 +116,7 @@
 int  
 UpdateFirmware(void)
 {
-#ifdef CONFIG_YAFU_SUPPORT
+#ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
 	env_set("mode", "1"); 
 	fwupdate();
 #endif
@@ -1213,7 +1213,7 @@
 	char *side = NULL;
 	u8 golden_side;
 	struct spi_flash *flash;
-#ifdef CONFIG_YAFU_SUPPORT
+#ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
 	int  boot_fwupd = 0;
 #endif
 #ifdef CONFIG_BOOTLOGO_SUPPORT
@@ -1232,7 +1232,7 @@
 
 	sprintf(baudrate_str,"%d",CONFIG_BAUDRATE);
 
-#ifdef CONFIG_YAFU_SUPPORT
+#ifdef CONFIG_SPX_FEATURE_BMC_FIRMWARE_AUTO_RECOVERY
 	s = env_get("boot_fwupd");
 	if (s != NULL)
 	{

--- uboot.old/oem/ami/fmh/fmhcore.c	2022-09-18 03:35:12.000000000 -0700
+++ uboot/oem/ami/fmh/fmhcore.c	2022-10-14 04:05:40.232288903 -0700
@@ -10,7 +10,7 @@
 	#include <string.h>
 #endif
 #include <oem/ami/fmh/fmh.h>
-//#include "crc32.h"
+#include "crc32.h"
 #include <flash.h>
 #include <mtd/cfi_flash.h>
 #include <spi_flash.h>
@@ -305,3 +305,23 @@
 	return;
 }
 
+void
+BeginCRC32(unsigned long *crc32)
+{
+	*crc32 = 0xFFFFFFFF;
+	return;
+}
+
+void
+DoCRC32(unsigned long *crc32, unsigned char Data)
+{
+	*crc32=((*crc32) >> 8) ^ CrcLookUpTable[Data ^ ((*crc32) & 0x000000FF)];
+	return;
+}
+
+void
+EndCRC32(unsigned long *crc32)
+{
+	*crc32 = ~(*crc32);
+	return;
+}
--- uboot.old/oem/ami/fmh/crc32.h	2022-10-14 02:13:52.000000000 -0700
+++ uboot/oem/ami/fmh/crc32.h	2022-08-17 01:20:58.000000000 -0700
@@ -0,0 +1,74 @@
+#ifndef AMI_CRC32_H
+#define AMI_CRC32_H
+unsigned long  CrcLookUpTable[256] =
+{
+	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
+	0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
+	0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
+	0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
+	0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
+	0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
+	0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
+	0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
+	0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
+	0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
+	0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
+	0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
+	0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
+	0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
+	0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
+	0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
+
+	0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
+	0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
+	0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
+	0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
+	0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
+	0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
+	0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
+	0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
+	0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
+	0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
+	0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
+	0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
+	0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
+	0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
+	0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
+	0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
+
+	0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
+	0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
+	0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
+	0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
+	0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
+	0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
+	0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
+	0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
+	0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
+	0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
+	0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
+	0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
+	0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
+	0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
+	0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
+	0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
+
+	0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
+	0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
+	0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
+	0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
+	0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
+	0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
+	0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
+	0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
+	0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
+	0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
+	0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
+	0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
+	0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
+	0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
+	0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
+	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
+};
+
+#endif
--- uboot.old/oem/ami/ipmi/cmdhandler.c	2022-09-18 03:35:12.000000000 -0700
+++ uboot/oem/ami/ipmi/cmdhandler.c	2022-10-14 04:07:27.314907259 -0700
@@ -81,7 +81,7 @@
      unsigned char *Nextenv;
      uchar *env,*nxt = NULL;
 
-     uchar *env_data = (uchar *)env_get_char(0);
+     uchar *env_data = (uchar *)(CONFIG_SPX_FEATURE_GLOBAL_UBOOT_ENV_START + 4);
      Nextenv = VarName;
      for (env=env_data; *env; env=nxt+1)
      {
@@ -616,8 +616,9 @@
 int AMIYAFUProtectFlash ( unsigned char *pReq, unsigned char ReqLen, unsigned char *pRes ) 
 {
 
-	char *argv [4];
     AMIYAFUProtectFlashReq_T *pAMIYAFUProtectFlashReq = (AMIYAFUProtectFlashReq_T *)pReq;
+    struct spi_flash *flash;
+    int retval = -1;
 
 if(ActivateFlashStatus == 0x01)
 {
@@ -652,12 +653,16 @@
 	   return (sizeof(AMIYAFUNotAck));
    }
 
-    argv[0] = "protect";
-    argv[1] = "off";
-     argv[2] = "all";
-     argv[3] = NULL;
+    flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
+                            CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
+        if (flash == NULL) 
+        {
+            puts("\nspi_flash_probe failed");
+            hang();
+        }
 
-     if (0 != do_protect (NULL,0,3,argv))
+     retval = spi_flash_protect (flash, CONFIG_ENV_SPI_CS, CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE, 0);
+     if ((0 != retval) && (-EOPNOTSUPP != retval))
      {
 	   AMIYAFUNotAck* pAMIYAFUNotAcknowledge =(AMIYAFUNotAck*)pRes;
 	   pAMIYAFUNotAcknowledge->NotAck.Seqnum = pAMIYAFUProtectFlashReq->ProtectFlashReq.Seqnum;
--- uboot.old/oem/ami/fwupdate/ast_kcs.c	2022-10-14 02:14:02.000000000 -0700
+++ uboot/oem/ami/fwupdate/ast_kcs.c	2022-10-03 02:27:36.000000000 -0700
@@ -0,0 +1,151 @@
+/*****************************************************************
+ *****************************************************************
+ ***                                                            **
+ ***    (C)Copyright 2002-2003, American Megatrends Inc.        **
+ ***                                                            **
+ ***            All Rights Reserved.                            **
+ ***                                                            **
+ ***        6145-F, Northbelt Parkway, Norcross,                **
+ ***                                                            **
+ ***        Georgia - 30071, USA. Phone-(770)-246-8600.         **
+ ***                                                            **
+ *****************************************************************
+ *****************************************************************
+
+ ******************************************************************
+ * 
+ * KCS.c
+ * KCS Functions.
+ *
+ *  Author: Rama Rao Bisa <ramab@ami.com>
+ *			Modified by Anurag Bhatia for Pilot-II porting		
+ ******************************************************************/
+#include <common.h>
+#include <config.h>
+
+#include "ast_kcs.h"
+
+/* LPC Base Address */ 
+#define AST_LPC_BASE		0x1E789000
+#define LPC_BASE_ADDR       AST_LPC_BASE
+
+/* Register Definitions */
+#define HICR0				0x00
+#define HICR1				0x04
+#define HICR2				0x08
+#define HICR3				0x0C
+#define HICR4				0x10
+#define LADR3H				0x14
+#define LADR3L				0x18
+#define LADR12H				0x1C
+#define LADR12L				0x20
+
+#define BIT0	0x01
+#define BIT1	0x02
+#define BIT2	0x04
+#define BIT3	0x08
+#define BIT4	0x10
+#define BIT5	0x20
+#define BIT6	0x40
+#define BIT7	0x80
+
+#define	KCS_1_CHANNEL			0
+#define	KCS_2_CHANNEL			1
+#define KCS_3_CHANNEL			2
+
+#define WRITE_U8(reg,data)			*((volatile unsigned long *)(reg)) = (data)
+#define READ_U8(reg)					*((volatile unsigned long *)(reg))
+
+
+#define DISABLE_KCS_INTRS(CHANNEL)				 				\
+do {                    									  	\
+	u8 temp;                    				               	\
+    switch (CHANNEL) {                                     	  	\
+    case KCS_1_CHANNEL:										  	\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR2);					  	\
+		temp &= (~BIT3);								  		\
+		WRITE_U8(lpc_base[CHANNEL] + HICR2,temp);				  		\
+	break;   												  	\
+    case KCS_2_CHANNEL:										  	\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR2);					  	\
+		temp &= (~BIT2);									  	\
+		WRITE_U8(lpc_base[CHANNEL] + HICR2,temp);				  		\
+	break;   												  	\
+    }                                                      	  	\
+} while (0)
+
+
+
+#define ENABLE_KCS_ADDRESS_SELECT(CHANNEL)     				    \
+do {                    									 	\
+	unsigned char temp;                    				      	\
+    switch (CHANNEL) {                                     	  	\
+    case KCS_1_CHANNEL:										  	\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR4);					  	\
+		temp |= BIT2;										  	\
+		temp &= ~BIT0;										  	\
+		WRITE_U8 (lpc_base[CHANNEL]+ HICR4,temp);					  	\
+	break;   												  	\
+    case KCS_2_CHANNEL:										  	\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR4);					  	\
+		temp |= BIT7;										  	\
+		WRITE_U8 (lpc_base[CHANNEL]+ HICR4,temp);				  		\
+	break;   												  	\
+    }                                                  		  	\
+} while (0)
+
+#define SET_KCS_ADDRESS(CHANNEL, ADDR) 						              			\
+do {                    												  			\
+	int temp = ADDR;                   				              		  			\
+    switch (CHANNEL) {                                     				  			\
+    case KCS_1_CHANNEL:													  			\
+		WRITE_U8 (lpc_base[CHANNEL] + LADR3H, (unsigned char)(temp >> 8));		  			\
+		WRITE_U8 (lpc_base[CHANNEL] + LADR3L, (unsigned char)(temp & 0xFA));					\
+	break;   															 			\
+    case KCS_2_CHANNEL:													  			\
+		WRITE_U8 (lpc_base[CHANNEL] +LADR12H, (unsigned char)(temp >> 8));		  			\
+		WRITE_U8 (lpc_base[CHANNEL] +LADR12L, (unsigned char)(temp));		  				\
+	break;   															  			\
+    }                                                      				  			\
+} while (0)
+
+#define ENABLE_KCS_CHANNEL(CHANNEL)				      			\
+do {                    									  	\
+	unsigned char temp;                    				      	\
+    switch (CHANNEL) {                                     	  	\
+    case KCS_1_CHANNEL:									  		\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR0);						\
+		temp |= BIT7;									  		\
+		WRITE_U8 (lpc_base[CHANNEL] + HICR0,temp);						\
+	break;   												  	\
+    case KCS_2_CHANNEL:										  	\
+		temp = READ_U8(lpc_base[CHANNEL] + HICR0);						\
+		temp |= BIT6;										  	\
+		WRITE_U8 (lpc_base[CHANNEL] + HICR0,temp);				  		\
+	break;   											  		\
+    }                                                     		\
+} while (0)
+
+
+
+
+volatile unsigned char   *lpc_base[MAX_KCS_CHANNEL];
+void InitializeKCSHardware(void)
+{
+	static int m_kcs1baseaddr = 0xCA2;
+	static int m_kcs2baseaddr = 0xCA4;
+	lpc_base[0]				= (unsigned char *) LPC_BASE_ADDR;
+	lpc_base[1]				= (unsigned char *) LPC_BASE_ADDR;
+
+	ENABLE_KCS_ADDRESS_SELECT  (KCS_1_CHANNEL);
+	SET_KCS_ADDRESS				(KCS_1_CHANNEL, m_kcs1baseaddr);
+	ENABLE_KCS_CHANNEL 			(KCS_1_CHANNEL);
+	DISABLE_KCS_INTRS(0);
+
+	ENABLE_KCS_ADDRESS_SELECT  (KCS_2_CHANNEL);
+	SET_KCS_ADDRESS				(KCS_2_CHANNEL, m_kcs2baseaddr);
+	ENABLE_KCS_CHANNEL 			(KCS_2_CHANNEL);
+	DISABLE_KCS_INTRS(1);
+	return;
+}
+
--- uboot.old/oem/ami/fwupdate/ast_kcs.h	2022-10-14 02:14:16.000000000 -0700
+++ uboot/oem/ami/fwupdate/ast_kcs.h	2022-10-03 02:27:36.000000000 -0700
@@ -0,0 +1,32 @@
+/*****************************************************************
+ *****************************************************************
+ ***                                                            **
+ ***    (C)Copyright 2002-2003, American Megatrends Inc.        **
+ ***                                                            **
+ ***            All Rights Reserved.                            **
+ ***                                                            **
+ ***        6145-F, Northbelt Parkway, Norcross,                **
+ ***                                                            **
+ ***        Georgia - 30071, USA. Phone-(770)-246-8600.         **
+ ***                                                            **
+ ******************************************************************/
+/* AST KCS Registers offsets used for KCS - YAFU Upgrade */
+
+#ifndef AST_KCS_H
+#define AST_KCS_H
+
+#define MAX_KCS_CHANNEL     2
+
+#define KCS_IDR3			0x24
+#define KCS_ODR3			0x30	
+#define KCS_STATUS_3		0x3C	
+
+#define KCS_IDR2			0x28
+#define KCS_ODR2			0x34
+#define KCS_STATUS_2		0x40
+
+#define KCS_IDR1			0x2C
+#define KCS_ODR1			0x38
+#define KCS_STATUS_1		0x44
+
+#endif
--- uboot.old/oem/ami/fwupdate/fwupdate.c	2022-09-18 03:35:12.000000000 -0700
+++ uboot/oem/ami/fwupdate/fwupdate.c	2022-10-14 04:08:14.215476406 -0700
@@ -638,12 +638,10 @@
 	unsigned long 	cnt,BlkToUpgrade;
 	unsigned char	*TempBuf = (unsigned char*)YAFU_TEMP_SECTOR_BUFFER;
 	unsigned char	*src,*pRamAddress=0;
-	flash_info_t 	*pFlashInfo;
-	int bank = 0, prev_sector = 0 ,sector_number = 0;
+	int prev_sector = 0 ,sector_number = 0;
 	unsigned long 	BaseFlashAddrs = 0;
 	struct spi_flash *flash;	
 
- 	pFlashInfo = &flash_info[bank];
 	pKCSRes  = (KCSCmd_T*)(&m_KCSRes[0]);
 	pKCSCmd  = (KCSCmd_T*)(&m_KCSCmd[0]);
 	pIPMICmd = (IPMICmdData_T *)(&m_IPMICmd);
@@ -703,7 +701,7 @@
 				prev_sector = sector_number;//This assignment will only take place,when there is bank change.
 			}*/
 
-			SectorToUpdate = SectorToUpdate % (pFlashInfo->size  / CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
+			SectorToUpdate = SectorToUpdate % (CONFIG_SPX_FEATURE_GLOBAL_USED_FLASH_SIZE  / CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE);
 			if(0 != spi_flash_read(flash,(SectorToUpdate * CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE ), CONFIG_SPX_FEATURE_GLOBAL_ERASE_BLOCK_SIZE, (char *)TempBuf))
 			{
                 retries--;
--- uboot.old/oem/ami/fwupdate/Makefile	2022-09-18 03:35:10.000000000 -0700
+++ uboot/oem/ami/fwupdate/Makefile	2022-10-13 22:40:58.000000000 -0700
@@ -22,4 +22,4 @@
 CCFLAGS-y += -mno-unaligned-access
 endif
 
-obj-y += fwupdate.o kcsifc.o
+obj-y += fwupdate.o kcsifc.o ast_kcs.o
