--- net-snmp-5.8_ori/snmplib/snmpusm.c	2022-11-08 23:34:20.342689427 +0800
+++ net-snmp-5.8/snmplib/snmpusm.c 17:53:23.000000000 +0800
@@ -4586,6 +4586,95 @@
     }
 }                               /* end usm_set_password() */
 
+unsigned long file_size(FILE* fp)
+{
+    fseek(fp, 0L, SEEK_END);
+    unsigned long size = ftell(fp);
+    fseek(fp, 0L, SEEK_SET);
+    return size;
+}
+
+int decrypt_pwd(char *hex_enc_pwd, unsigned int enc_pwd_len, char *pwd)
+{
+    unsigned long aeskey_file_size = 0;
+    unsigned long aesiv_file_size = 0;
+    char enc_pwd[AES_SIZE+1] = {0};
+    char tmp_data[AES_SIZE+1] = {0};
+    char pwd_len_str[TWO_CHAR_SIZE] = {0};
+    unsigned int pwd_len = 0;
+    unsigned int i = 0;
+    int ret = 0;
+
+    FILE *aesiv_file = fopen("/conf/AESIV", "rb");
+    if(!aesiv_file)
+    {
+        return -1;
+    }
+    FILE *aeskey_file = fopen("/conf/AESKey", "rb");
+    if(!aeskey_file)
+    {
+        fclose(aesiv_file);
+        return -1;
+    }
+
+    aeskey_file_size = file_size(aeskey_file);
+    aesiv_file_size = file_size(aesiv_file);
+    if(aesiv_file_size < AES_SIZE || aeskey_file_size < AES_SIZE)
+    {
+        //snmp_log(LOG_ERR,"AESKey or AESIV data size error!");
+        goto ERROR_RETURN;
+    }
+
+    //Convert the string hex data to encrypt password data
+    for(i = 0; i < AES_SIZE; i++)
+    {
+        char hex_str[TWO_CHAR_SIZE] = {0};
+        ret = snprintf(hex_str, sizeof(hex_str), "%C%C", hex_enc_pwd[i*2], hex_enc_pwd[i*2+1]);
+        if((ret < 0) || (ret >= (int)sizeof(hex_str)))
+        {
+            snmp_log(LOG_ERR,"Buffer overflow!");
+            goto ERROR_RETURN;
+        }
+
+        enc_pwd[i] = strtol(hex_str, NULL, 16);
+
+    }
+
+    //Use XOR cipher to decrypt the password
+    for(i = 0; i < AES_SIZE; i++)
+    {
+        char aeskey_char = (char)fgetc(aeskey_file);
+        char aesiv_char = (char)fgetc(aesiv_file);
+        tmp_data[i] = aeskey_char ^ aesiv_char ^ enc_pwd[i];
+    }
+
+
+    ret = snprintf(pwd_len_str, sizeof(pwd_len_str), "%C%C", tmp_data[PREFIX_HEX_INDEX], tmp_data[SUBFIX_HEX_INDEX]);
+    if((ret < 0) || (ret >= (int)sizeof(pwd_len_str)))
+    {
+        snmp_log(LOG_ERR,"Buffer overflow!");
+        goto ERROR_RETURN;
+    }
+
+    pwd_len = strtol(pwd_len_str, NULL, 16) + 1;
+
+    ret = snprintf(pwd, pwd_len, "%s", &tmp_data[PASSWORD_START_INDEX]);
+    if((ret < 0) || (ret >= (int)pwd_len))
+    {
+        snmp_log(LOG_ERR,"Buffer overflow!");
+        goto ERROR_RETURN;
+    }
+
+    fclose(aeskey_file);
+    fclose(aesiv_file);
+    return SNMPERR_SUCCESS;
+    
+    ERROR_RETURN:
+        fclose(aesiv_file);
+        fclose(aeskey_file);
+        return -1;
+}
+
 /*
  * create a usm user from a string.
  *
@@ -4604,6 +4693,7 @@
     char           *cp;
     const char     *dummy;
     char            buf[SNMP_MAXBUF_MEDIUM];
+    char            pwd[SNMP_MAXBUF_MEDIUM] = {0};
     struct usmUser *newuser;
     u_char          userKey[SNMP_MAXBUF_SMALL], *tmpp;
     size_t          userKeyLen = SNMP_MAXBUF_SMALL;
@@ -4767,8 +4857,13 @@
     } else if (strcmp(buf,"-l") != 0) {
         /* a password is specified */
         userKeyLen = sizeof(userKey);
+        ret = decrypt_pwd((char *)buf, strlen((char *)buf), pwd);
+        if (ret != SNMPERR_SUCCESS){
+            *errorMsg = "Failed to decrypt the password.";
+            goto fail;
+        }
         ret2 = generate_Ku(newuser->authProtocol, newuser->authProtocolLen,
-                          (u_char *) buf, strlen(buf), userKey, &userKeyLen);
+                          (u_char *) pwd, strlen(pwd), userKey, &userKeyLen);
         if (ret2 != SNMPERR_SUCCESS) {
             *errorMsg = "could not generate the authentication key from the supplied pass phrase.";
             goto fail;
