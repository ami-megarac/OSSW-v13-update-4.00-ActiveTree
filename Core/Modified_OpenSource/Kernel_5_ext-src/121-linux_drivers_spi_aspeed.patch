--- ori_linux/drivers/spi/spi-aspeed.c	2021-10-29 15:06:04.034067395 +0800
+++ linux/drivers/spi/spi-aspeed.c	2021-10-29 18:06:06.034060575 +0800
@@ -1265,6 +1265,44 @@
 };
 MODULE_DEVICE_TABLE(of, aspeed_spi_matches);
 
+static void aspeed_spi_set_cs(struct spi_device *spi, bool enable)
+{
+	struct aspeed_spi_controller *ast_ctrl =
+		spi_controller_get_devdata(spi->controller);
+	u8 cs = spi->chip_select;
+	void __iomem *ce_ctrl_reg =
+		ast_ctrl->regs + OFFSET_CE0_CTRL_REG + cs * 4;
+
+	if (!enable)
+		writel(CTRL_IO_MODE_USER, ce_ctrl_reg);
+	else
+		writel(CTRL_STOP_ACTIVE | CTRL_IO_MODE_USER, ce_ctrl_reg);
+}
+
+static int aspeed_spi_transfer_one(struct spi_controller *ctlr,
+				   struct spi_device *spi,
+				   struct spi_transfer *transfer)
+{
+	struct aspeed_spi_controller *ast_ctrl =
+		spi_controller_get_devdata(ctlr);
+	u8 cs = spi->chip_select;
+	struct aspeed_spi_chip *chip = &ast_ctrl->chips[cs];
+	int i;
+	const u8 *tx_buf;
+	u8 *rx_buf;
+
+	tx_buf = transfer->tx_buf;
+	rx_buf = transfer->rx_buf;
+	if (tx_buf)
+		for (i = 0; i < transfer->len; i++)
+			writeb(tx_buf[i], chip->ahb_base);
+	else if (rx_buf)
+		for (i = 0; i < transfer->len; i++)
+			rx_buf[i] = readb(chip->ahb_base);
+
+	return 0;
+}
+
 static int aspeed_spi_probe(struct platform_device *pdev)
 {
 	int ret;
@@ -1394,6 +1432,9 @@
 
 	spi_ctrl->dev.of_node = dev->of_node;
 	spi_ctrl->num_chipselect = ast_ctrl->num_cs;
+    spi_ctrl->flags = SPI_CONTROLLER_HALF_DUPLEX;
+    spi_ctrl->set_cs = aspeed_spi_set_cs;	
+    spi_ctrl->transfer_one = aspeed_spi_transfer_one;
 
 	ret = aspeed_spi_ctrl_init(ast_ctrl);
 	if (ret)
