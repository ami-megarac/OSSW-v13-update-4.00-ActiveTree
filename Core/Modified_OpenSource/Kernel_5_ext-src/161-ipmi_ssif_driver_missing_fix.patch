--- linux/drivers/i2c/busses/i2c-new-aspeed.c_orig	2022-05-31 19:00:38.111053778 +0530
+++ linux/drivers/i2c/busses/i2c-new-aspeed.c	2022-05-31 18:58:03.758655228 +0530
@@ -987,9 +987,13 @@
 		dev_dbg(i2c_bus->dev, "S : Sr|D\n");
 		byte_data = AST_I2CC_GET_RX_BUFF(readl(i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF));
 		dev_dbg(i2c_bus->dev, "addr : [%02x]", byte_data);
+		ier = readl(i2c_bus->reg_base + AST_I2CS_IER);
+		ier  &= ~(AST_I2CS_RX_DONE | AST_I2CS_SLAVE_MATCH);
+		sts &= ~ ( AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_WAIT_TX_DMA );
+		writel(ier, i2c_bus->reg_base + AST_I2CS_IER);
 		i2c_slave_event(i2c_bus->slave, I2C_SLAVE_READ_REQUESTED, &byte_data);
-		dev_dbg(i2c_bus->dev, "tx: [%02x]\n", byte_data);
-		writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
+		//dev_dbg(i2c_bus->dev, "tx: [%02x]\n", byte_data);
+		//writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
 		break;
 	case AST_I2CS_TX_ACK | AST_I2CS_WAIT_TX_DMA:
 		cmd |= AST_I2CS_TX_CMD;
@@ -999,8 +1003,21 @@
 		writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
 		break;
 	case AST_I2CS_STOP:
+	case AST_I2CS_RX_DONE | AST_I2CS_RX_DONE_NAK | AST_I2CS_STOP:
 	case AST_I2CS_STOP | AST_I2CS_TX_NAK:
 		dev_dbg(i2c_bus->dev, "S : P\n");
+		value = sts ;
+		dev_dbg(i2c_bus->dev, "value=%x \n",value);
+		if(sts & AST_I2CS_RX_DONE)
+		{
+			dev_dbg(i2c_bus->dev, "S : D \n");
+			byte_data = AST_I2CC_GET_RX_BUFF(readl(i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF));
+			i2c_slave_event(i2c_bus->slave, I2C_SLAVE_WRITE_RECEIVED, &byte_data);
+			dev_dbg(i2c_bus->dev, "rx [%x]", byte_data);
+		}
+		if(sts & AST_I2CS_RX_DONE_NAK)
+			dev_dbg(i2c_bus->dev, "rx: NACK\n");
+
 		i2c_slave_event(i2c_bus->slave, I2C_SLAVE_STOP, &value);
 		break;
 	default:
