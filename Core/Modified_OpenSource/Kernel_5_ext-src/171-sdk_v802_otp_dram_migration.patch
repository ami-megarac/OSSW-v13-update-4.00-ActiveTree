diff -Naur  linux_org/drivers/edac/aspeed_edac.c linux/drivers/edac/aspeed_edac.c
--- linux_org/drivers/edac/aspeed_edac.c	2022-07-25 16:14:52.478804184 +0800
+++ linux/drivers/edac/aspeed_edac.c	2022-08-08 17:06:56.165617233 +0800
@@ -20,7 +20,6 @@
 
 #define ASPEED_MCR_PROT        0x00 /* protection key register */
 #define ASPEED_MCR_CONF        0x04 /* configuration register */
-#define ASPEED_MCR_REQ  	   0x08	/* Graphics Memory Protection register */
 #define ASPEED_MCR_INTR_CTRL   0x50 /* interrupt control/status register */
 #define ASPEED_MCR_ADDR_UNREC  0x58 /* address of first un-recoverable error */
 #define ASPEED_MCR_ADDR_REC    0x5c /* address of last recoverable error */
@@ -64,76 +63,6 @@
 	return 0;
 }
 
-extern void
-aspeed_sdmc_disable_mem_protection(u8 req)
-{
-	u32 req_val = 0;
-	regmap_read(aspeed_regmap, ASPEED_MCR_REQ, &req_val);
-
-	req_val &= ~BIT(req);
-
-	regmap_write(aspeed_regmap, ASPEED_MCR_REQ, req_val);
-}
-EXPORT_SYMBOL(aspeed_sdmc_disable_mem_protection);
-
-static const u32 ast2400_dram_table[] = {
-	0x04000000,	//64MB
-	0x08000000,	//128MB
-	0x10000000, //256MB
-	0x20000000,	//512MB
-};
-
-static const u32 ast2500_dram_table[] = {
-	0x08000000,	//128MB
-	0x10000000,	//256MB
-	0x20000000,	//512MB
-	0x40000000,	//1024MB
-};
-
-static const u32 ast2600_dram_table[] = {
-	0x10000000,	//256MB
-	0x20000000,	//512MB
-	0x40000000,	//1024MB
-	0x80000000,	//2048MB
-};
-
-extern u32 aspeed_get_dram_size(void)
-{
-	u32 reg04;
-	u32 size;
-
-	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-
-#if defined(CONFIG_MACH_ASPEED_G6)
-	size = ast2600_dram_table[reg04 & 0x3];
-#elif defined(CONFIG_MACH_ASPEED_G5)
-	size = ast2500_dram_table[reg04 & 0x3];
-#else
-	size = ast2400_dram_table[reg04 & 0x3];
-#endif
-	return size;
-}
-EXPORT_SYMBOL(aspeed_get_dram_size);
-
-static const u32 aspeed_vga_table[] = {
-	0x800000,	//8MB
-	0x1000000,	//16MB
-	0x2000000,	//32MB
-	0x4000000,	//64MB
-};
-
-extern u32 aspeed_get_vga_size(void)
-{
-	u32 reg04;
-	u32 size;
-
-	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-
-	size = aspeed_vga_table[((reg04 & 0xC) >> 2)];
-	return size;
-}
-EXPORT_SYMBOL(aspeed_get_vga_size);
-
 static bool regmap_is_volatile(struct device *dev, unsigned int reg)
 {
 	switch (reg) {
@@ -147,7 +76,6 @@
 	}
 }
 
-
 static const struct regmap_config aspeed_regmap_config = {
 	.reg_bits = 32,
 	.val_bits = 32,
@@ -325,8 +253,8 @@
 		return rc;
 	}
 
-	dev_dbg(mci->pdev, "dt: /memory node resources: first page r.start=0x%x, resource_size=0x%x, PAGE_SHIFT macro=0x%x\n",
-		r.start, resource_size(&r), PAGE_SHIFT);
+	dev_dbg(mci->pdev, "dt: /memory node resources: first page %pR, PAGE_SHIFT macro=0x%x\n",
+		&r, PAGE_SHIFT);
 
 	csrow->first_page = r.start >> PAGE_SHIFT;
 	nr_pages = resource_size(&r) >> PAGE_SHIFT;
@@ -354,7 +282,7 @@
 	struct edac_mc_layer layers[2];
 	struct mem_ctl_info *mci;
 	void __iomem *regs;
-	//u32 reg04;
+	u32 reg04;
 	int rc;
 
 	regs = devm_platform_ioremap_resource(pdev, 0);
@@ -367,11 +295,11 @@
 		return PTR_ERR(aspeed_regmap);
 
 	/* bail out if ECC mode is not configured */
-	// regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
-	// if (!(reg04 & ASPEED_MCR_CONF_ECC)) {
-	// 	dev_err(&pdev->dev, "ECC mode is not configured in u-boot\n");
-	// 	return -EPERM;
-	// }
+	regmap_read(aspeed_regmap, ASPEED_MCR_CONF, &reg04);
+	if (!(reg04 & ASPEED_MCR_CONF_ECC)) {
+		dev_err(&pdev->dev, "ECC mode is not configured in u-boot\n");
+		return -EPERM;
+	}
 
 	edac_op_state = EDAC_OPSTATE_INT;
 
diff -Naur  linux_org/drivers/soc/aspeed/aspeed-otp.c linux/drivers/soc/aspeed/aspeed-otp.c
--- linux_org/drivers/soc/aspeed/aspeed-otp.c	2022-07-25 16:14:55.330763524 +0800
+++ linux/drivers/soc/aspeed/aspeed-otp.c	2022-08-08 17:06:34.893930805 +0800
@@ -377,6 +377,43 @@
 	return otp_prog_bit(ctx, value, prog_address, bit_offset);
 }
 
+struct aspeed_otp *glob_ctx;
+
+void otp_read_data_buf(u32 offset, u32 *buf, u32 len)
+{
+	int i, j;
+	u32 ret[2];
+
+	aspeed_otp_write(glob_ctx, OTP_PASSWD, OTP_PROTECT_KEY);
+
+	otp_soak(glob_ctx, 0);
+
+	i = offset;
+	j = 0;
+	if (offset % 2) {
+		otp_read_data_2dw(glob_ctx, i - 1, ret);
+		buf[0] = ret[1];
+		i++;
+		j++;
+	}
+	for (; j < len; i += 2, j += 2)
+		otp_read_data_2dw(glob_ctx, i, &buf[j]);
+	aspeed_otp_write(glob_ctx, 0, OTP_PROTECT_KEY);
+}
+EXPORT_SYMBOL(otp_read_data_buf);
+
+void otp_read_conf_buf(u32 offset, u32 *buf, u32 len)
+{
+	int i, j;
+
+	aspeed_otp_write(glob_ctx, OTP_PASSWD, OTP_PROTECT_KEY);
+	otp_soak(glob_ctx, 0);
+	for (i = offset, j = 0; j < len; i++, j++)
+		otp_read_conf_dw(glob_ctx, i, &buf[j]);
+	aspeed_otp_write(glob_ctx, 0, OTP_PROTECT_KEY);
+}
+EXPORT_SYMBOL(otp_read_conf_buf);
+
 static long otp_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	struct miscdevice *c = file->private_data;
@@ -525,6 +562,7 @@
 	int rc;
 
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	glob_ctx = priv;
 	if (!priv)
 		return -ENOMEM;
 
