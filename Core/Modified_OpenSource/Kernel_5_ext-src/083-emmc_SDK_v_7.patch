--- linux/drivers/mmc/host/sdhci-of-aspeed.c	2021-08-19 16:35:23.461293207 -0400
+++ linux.new/drivers/mmc/host/sdhci-of-aspeed.c	2021-08-19 18:29:17.586451110 -0400
@@ -13,6 +13,7 @@
 #include <linux/of_gpio.h>
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
+#include <linux/reset.h>
 #include <linux/spinlock.h>
 
 #include "sdhci-pltfm.h"
@@ -23,9 +24,16 @@
 
 #define TIMING_PHASE_OFFSET 0xF4
 
+#define PROBE_AFTER_ASSET_DEASSERT 0x1
+
+struct aspeed_sdc_info {
+	uint32_t flag;
+};
+
 struct aspeed_sdc {
 	struct clk *clk;
 	struct resource *res;
+	struct reset_control *rst;
 
 	spinlock_t lock;
 	void __iomem *regs;
@@ -38,6 +46,10 @@
 	int	pwr_sw_pin;
 };
 
+struct aspeed_sdc_info ast2600_sdc_info = {
+	.flag = PROBE_AFTER_ASSET_DEASSERT
+};
+
 static void aspeed_sdc_configure_8bit_mode(struct aspeed_sdc *sdc,
 					   struct aspeed_sdhci *sdhci,
 					   bool bus8)
@@ -175,7 +187,10 @@
                     if(gpio_is_valid(dev->pwr_sw_pin))
                             gpio_set_value(dev->pwr_sw_pin, 0);
             } else
-                    printk("todo fail check ~~ \n");
+	    	{
+			dev_err(&host->mmc->class_dev, "todo fail check ~~\n");
+		}
+                   // printk("todo fail check ~~ \n");
 
             sdhci_writeb(host, pwr, SDHCI_POWER_CONTROL);
     }
@@ -284,7 +299,8 @@
 		if (gpio_is_valid(dev->pwr_pin)) {
 			if (devm_gpio_request(&pdev->dev, dev->pwr_pin,
 								  "mmc_pwr")) {
-				printk("devm_gpio_request pwr fail \n");
+			//	printk("devm_gpio_request pwr fail \n");
+				dev_err(&pdev->dev, "devm_gpio_request pwr fail\n");
 			}
 			gpio_direction_output(dev->pwr_pin, 1);
 		}
@@ -296,7 +312,8 @@
 		if (gpio_is_valid(dev->pwr_sw_pin)) {
 			if (devm_gpio_request(&pdev->dev, dev->pwr_sw_pin,
 							  "mmc_pwr_sw")) {
-				printk("devm_gpio_request pwr sw fail \n");
+		//		printk("devm_gpio_request pwr sw fail \n");
+				dev_err(&pdev->dev, "devm_gpio_request pwr sw fail\n");
 			}
 			gpio_direction_output(dev->pwr_sw_pin, 1);
 		}
@@ -349,11 +366,22 @@
 	.remove		= aspeed_sdhci_remove,
 };
 
+static const struct of_device_id aspeed_sdc_of_match[] = {
+	{ .compatible = "aspeed,ast2400-sd-controller", },
+	{ .compatible = "aspeed,ast2500-sd-controller", },
+	{ .compatible = "aspeed,ast2600-sd-controller", .data = &ast2600_sdc_info},
+	{ }
+};
+
+MODULE_DEVICE_TABLE(of, aspeed_sdc_of_match);
+
 static int aspeed_sdc_probe(struct platform_device *pdev)
 
 {
 	struct device_node *parent, *child;
 	struct aspeed_sdc *sdc;
+	const struct of_device_id *match = NULL;
+	const struct aspeed_sdc_info *info = NULL;
 	int ret;
 	u32 timing_phase;
 
@@ -363,6 +391,23 @@
 
 	spin_lock_init(&sdc->lock);
 
+	match = of_match_device(aspeed_sdc_of_match, &pdev->dev);
+	if (!match)
+		return -ENODEV;
+
+	if (match->data)
+		info = match->data;
+
+	if (info) {
+		if (info->flag & PROBE_AFTER_ASSET_DEASSERT) {
+			sdc->rst = devm_reset_control_get(&pdev->dev, NULL);
+			if (!IS_ERR(sdc->rst)) {
+				reset_control_assert(sdc->rst);
+				reset_control_deassert(sdc->rst);
+			}
+		}
+	}
+
 	sdc->clk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(sdc->clk))
 		return PTR_ERR(sdc->clk);
@@ -413,7 +458,7 @@
 
 	return 0;
 }
-
+/*
 static const struct of_device_id aspeed_sdc_of_match[] = {
 	{ .compatible = "aspeed,ast2400-sd-controller", },
 	{ .compatible = "aspeed,ast2500-sd-controller", },
@@ -422,6 +467,7 @@
 };
 
 MODULE_DEVICE_TABLE(of, aspeed_sdc_of_match);
+*/
 
 static struct platform_driver aspeed_sdc_driver = {
 	.driver		= {
--- linux/arch/arm/boot/dts/aspeed-ast2600-evb.dts	2020-12-21 07:27:07.000000000 -0500
+++ linux.new/arch/arm/boot/dts/aspeed-ast2600-evb.dts	2021-08-19 18:29:18.162464066 -0400
@@ -75,6 +75,11 @@
 	status = "okay";
 };
 
+&emmc_controller {
+	status = "okay";
+	timing-phase = <0x300FF>;
+};
+
 &rtc {
 	status = "okay";
 };
--- linux/arch/arm/boot/dts/aspeed-g6-pinctrl.dtsi	2021-08-19 16:35:23.381291233 -0400
+++ linux.new/arch/arm/boot/dts/aspeed-g6-pinctrl.dtsi	2021-08-19 18:29:18.162464066 -0400
@@ -872,6 +872,11 @@
 		groups = "EMMCG4";
 	};
 
+	pinctrl_emmcg8_default: emmcg8_default {
+		function = "EMMC";
+		groups = "EMMCG8";
+	};
+
 	pinctrl_sgpm1_default: sgpm1_default {
 		function = "SGPM1";
 		groups = "SGPM1";
