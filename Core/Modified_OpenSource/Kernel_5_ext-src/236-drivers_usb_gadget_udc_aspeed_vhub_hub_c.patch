--- linux/drivers/usb/gadget/udc/aspeed-vhub/hub.c	2022-08-29 14:50:18.382983000 +0800
+++ linux_new/drivers/usb/gadget/udc/aspeed-vhub/hub.c	2022-08-30 15:49:25.541906264 +0800
@@ -892,122 +892,39 @@
 
 int ast_vhub_upstream_connect(struct ast_vhub *vhub)
 {
-	u32 ctrl, port_mask, epn_mask;
-	int rc = 0;
+	u32 ctrl;
 	unsigned long flags;
 	
 	spin_lock_irqsave(&vhub->lock, flags);
+	// No more init clk and DMA alloc, due to it was done in init_hw().
 	
-	vhub->clk = devm_clk_get(&vhub->pdev->dev, NULL);
-		if (IS_ERR(vhub->clk)) {
-			rc = PTR_ERR(vhub->clk);
-			goto err;
-		}
-		
-	rc = clk_prepare_enable(vhub->clk);
-	if (rc) {
-		dev_err(&vhub->pdev->dev, "Error couldn't enable clock (%d)\n", rc);	
-		goto err;
-	}
-	/*
-	 * Allocate DMA buffers for all EP0s in one chunk,
-	 * one per port and one for the vHub itself
-	 */
-	vhub->ep0_bufs = dma_alloc_coherent(&vhub->pdev->dev,
-						AST_VHUB_EP0_MAX_PACKET *
-						(vhub->max_ports + 1),
-						&vhub->ep0_bufs_dma, GFP_KERNEL);
-	if (!vhub->ep0_bufs) {
-		dev_err(&vhub->pdev->dev, "Failed to allocate EP0 DMA buffers\n");
-		rc = -ENOMEM;
-		goto err;
-	}
-	/* Enable PHY */
-	ctrl = VHUB_CTRL_PHY_CLK |
-		VHUB_CTRL_PHY_RESET_DIS;
-
-	   /*
-	* We do *NOT* set the VHUB_CTRL_CLK_STOP_SUSPEND bit
-	* to stop the logic clock during suspend because
-	* it causes the registers to become inaccessible and
-	* we haven't yet figured out a good wayt to bring the
-	* controller back into life to issue a wakeup.
-	*/
-
-	/*
-	 * Set some ISO & split control bits according to Aspeed
-	 * recommendation
-	 *
-	 * VHUB_CTRL_ISO_RSP_CTRL: When set tells the HW to respond
-	 * with 0 bytes data packet to ISO IN endpoints when no data
-	 * is available.
-	 *
-	 * VHUB_CTRL_SPLIT_IN: This makes a SOF complete a split IN
-	 * transaction.
-	 */
-	ctrl |= VHUB_CTRL_ISO_RSP_CTRL | VHUB_CTRL_SPLIT_IN;
-	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
-	udelay(1);
+	// No more enable PHY.
+
+	// No more setting for ISO & split control.
+
+	// No more setting for descriptor ring size.
+
+	// No more reset about devices.
+	
+	// No more cleanup about EP ACK/NACK interrupts.
+
+	// No more default setting for EP0 and HW hub EP1.
 
-	/* Set descriptor ring size */
-	if (AST_VHUB_DESCS_COUNT == 256) {
-		ctrl |= VHUB_CTRL_LONG_DESC;
-		writel(ctrl, vhub->regs + AST_VHUB_CTRL);
-	} else {
-		BUILD_BUG_ON(AST_VHUB_DESCS_COUNT != 32);
-	}
-
-	/* Reset all devices */
-	port_mask = GENMASK(vhub->max_ports, 1);
-	writel(VHUB_SW_RESET_ROOT_HUB |
-	       VHUB_SW_RESET_DMA_CONTROLLER |
-	       VHUB_SW_RESET_EP_POOL |
-	       port_mask, vhub->regs + AST_VHUB_SW_RESET);
-	udelay(1);
-	writel(0, vhub->regs + AST_VHUB_SW_RESET);
-
-	/* Disable and cleanup EP ACK/NACK interrupts */
-	epn_mask = GENMASK(vhub->max_epns - 1, 0);
-	writel(0, vhub->regs + AST_VHUB_EP_ACK_IER);
-	writel(0, vhub->regs + AST_VHUB_EP_NACK_IER);
-	writel(epn_mask, vhub->regs + AST_VHUB_EP_ACK_ISR);
-	writel(epn_mask, vhub->regs + AST_VHUB_EP_NACK_ISR);
-
-	/* Default settings for EP0, enable HW hub EP1 */
-	writel(0, vhub->regs + AST_VHUB_EP0_CTRL);
-	writel(VHUB_EP1_CTRL_RESET_TOGGLE |
-		   VHUB_EP1_CTRL_ENABLE,
-		   vhub->regs + AST_VHUB_EP1_CTRL);
-	writel(0, vhub->regs + AST_VHUB_EP1_STS_CHG);
-
-	/* Configure EP0 DMA buffer */
-	writel(vhub->ep0.buf_dma, vhub->regs + AST_VHUB_EP0_DATA);
-
-	/* Clear address */
-	writel(0, vhub->regs + AST_VHUB_CONF);
-	
-	/* Pullup hub (activate on host) */
-	if (vhub->force_usb1)
-		ctrl |= VHUB_CTRL_FULL_SPEED_ONLY;
+	// No more configure about EP0 DMA buffer.
 
+	// No more setting about clear address.
+	
+	// No more setting about pullup hub.
+
+	// Simply and just enable upstream.
 	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
 	ctrl |= VHUB_CTRL_UPSTREAM_CONNECT;
 	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
 
-	/* Enable some interrupts */
-	writel(VHUB_IRQ_HUB_EP0_IN_ACK_STALL |
-		   VHUB_IRQ_HUB_EP0_OUT_ACK_STALL |
-		   VHUB_IRQ_HUB_EP0_SETUP |
-		   VHUB_IRQ_EP_POOL_ACK_STALL |
-		   VHUB_IRQ_BUS_RESUME |
-		   VHUB_IRQ_BUS_SUSPEND |
-		   VHUB_IRQ_BUS_RESET,
-		   vhub->regs + AST_VHUB_IER);
+	// No more setting about interrupts.
 
 	spin_unlock_irqrestore(&vhub->lock, flags);
 	return 0;
-err:
-	return -1;
 }
 
 int ast_vhub_upstream_disconnect(struct ast_vhub *vhub)
@@ -1017,29 +934,17 @@
 
 	spin_lock_irqsave(&vhub->lock, flags);
 
+	// Simply and just disable upstream. 
 	ctrl = readl(vhub->regs + AST_VHUB_CTRL);
 	ctrl &= ~VHUB_CTRL_UPSTREAM_CONNECT;
 	writel(ctrl, vhub->regs + AST_VHUB_CTRL);
 	
-	// Pull device, leave PHY enabled 
-	writel(0, vhub->regs + AST_VHUB_IER);
-	writel(VHUB_IRQ_ACK_ALL, vhub->regs + AST_VHUB_ISR);
-
-	// Pull device, leave PHY enabled 
-	writel(VHUB_CTRL_PHY_CLK |
-	       VHUB_CTRL_PHY_RESET_DIS,
-	       vhub->regs + AST_VHUB_CTRL);
-	if (vhub->clk)
-		clk_disable_unprepare(vhub->clk);
+	// No more setting about interrupts.
+
+	// No more setting about Pull device and PHY.
 	spin_unlock_irqrestore(&vhub->lock, flags);
 
-	if (vhub->ep0_bufs)
-		dma_free_coherent(&vhub->pdev->dev,
-				  AST_VHUB_EP0_MAX_PACKET *
-				  (vhub->max_ports + 1),
-				  vhub->ep0_bufs,
-				  vhub->ep0_bufs_dma);
-	vhub->ep0_bufs = NULL;
+	// No more DMA free, due to DMA alloc only once.
 	
 	return 0;
 }
