diff -ruNa linux/drivers/base/swnode.c linux_n/drivers/base/swnode.c
--- linux/drivers/base/swnode.c	2021-06-03 14:59:17.000000000 +0800
+++ linux_n/drivers/base/swnode.c	2022-04-28 12:45:46.618800000 +0800
@@ -24,6 +24,7 @@
 	struct swnode *parent;
 
 	unsigned int allocated:1;
+	unsigned int managed:1;
 };
 
 static DEFINE_IDA(swnode_root_ids);
@@ -48,6 +49,19 @@
 				     struct swnode, fwnode) : NULL;	\
 	})
 
+static inline struct swnode *dev_to_swnode(struct device *dev)
+{
+	struct fwnode_handle *fwnode = dev_fwnode(dev);
+
+	if (!fwnode)
+		return NULL;
+
+	if (!is_software_node(fwnode))
+		fwnode = fwnode->secondary;
+
+	return to_swnode(fwnode);
+}
+
 static struct swnode *
 software_node_to_swnode(const struct software_node *node)
 {
@@ -862,6 +876,87 @@
 }
 EXPORT_SYMBOL_GPL(fwnode_remove_software_node);
 
+/**
+ * device_add_software_node - Assign software node to a device
+ * @dev: The device the software node is meant for.
+ * @node: The software node.
+ *
+ * This function will make @node the secondary firmware node pointer of @dev. If
+ * @dev has no primary node, then @node will become the primary node. The
+ * function will register @node automatically if it wasn't already registered.
+ */
+int device_add_software_node(struct device *dev, const struct software_node *node)
+{
+	struct swnode *swnode;
+	int ret;
+
+	/* Only one software node per device. */
+	if (dev_to_swnode(dev))
+		return -EBUSY;
+
+	swnode = software_node_to_swnode(node);
+	if (swnode) {
+		kobject_get(&swnode->kobj);
+	} else {
+		ret = software_node_register(node);
+		if (ret)
+			return ret;
+
+		swnode = software_node_to_swnode(node);
+	}
+
+	set_secondary_fwnode(dev, &swnode->fwnode);
+
+	/*
+	 * If the device has been fully registered by the time this function is
+	 * called, software_node_notify() must be called separately so that the
+	 * symlinks get created and the reference count of the node is kept in
+	 * balance.
+	 */
+	if (device_is_registered(dev))
+		software_node_notify(dev,KOBJ_MOVE);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(device_add_software_node);
+void software_node_notify_remove(struct device *dev)
+{
+	struct swnode *swnode;
+
+	swnode = dev_to_swnode(dev);
+	if (!swnode)
+		return;
+
+	sysfs_remove_link(&swnode->kobj, dev_name(dev));
+	sysfs_remove_link(&dev->kobj, "software_node");
+	kobject_put(&swnode->kobj);
+
+	if (swnode->managed) {
+		set_secondary_fwnode(dev, NULL);
+		kobject_put(&swnode->kobj);
+	}
+}
+/**
+ * device_remove_software_node - Remove device's software node
+ * @dev: The device with the software node.
+ *
+ * This function will unregister the software node of @dev.
+ */
+void device_remove_software_node(struct device *dev)
+{
+	struct swnode *swnode;
+
+	swnode = dev_to_swnode(dev);
+	if (!swnode)
+		return;
+
+	if (device_is_registered(dev))
+		software_node_notify_remove(dev);
+
+	set_secondary_fwnode(dev, NULL);
+	kobject_put(&swnode->kobj);
+}
+EXPORT_SYMBOL_GPL(device_remove_software_node);
 int software_node_notify(struct device *dev, unsigned long action)
 {
 	struct fwnode_handle *fwnode = dev_fwnode(dev);
diff -ruNa linux/drivers/i2c/busses/aspeed-i2c-new-global.c linux_n/drivers/i2c/busses/aspeed-i2c-new-global.c
--- linux/drivers/i2c/busses/aspeed-i2c-new-global.c	1970-01-01 08:00:00.000000000 +0800
+++ linux_n/drivers/i2c/busses/aspeed-i2c-new-global.c	2022-04-14 15:21:42.000000000 +0800
@@ -0,0 +1,91 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Aspeed I2C Global Controller Driver.
+ *
+ * Copyright (C) ASPEED Technology Inc.
+ */
+#include <linux/platform_device.h>
+#include <linux/of_platform.h>
+#include <linux/of_address.h>
+#include <linux/module.h>
+#include <linux/reset.h>
+#include <linux/delay.h>
+#include <linux/io.h>
+#include "aspeed-i2c-new-global.h"
+
+struct aspeed_i2c_new_global {
+	void __iomem		*base;
+	struct reset_control	*rst;
+};
+
+static const struct of_device_id aspeed_i2c_ic_of_match[] = {
+	{ .compatible = "aspeed,ast2600-i2c-global", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, aspeed_i2c_ic_of_match);
+
+#define I2CCG_DIV_CTRL 0xC6411208
+/*
+ * APB clk : 100Mhz
+ * div  : scl       : baseclk [APB/((div/2) + 1)] : tBuf [1/bclk * 16]
+ * I2CG10[31:24] base clk4 for i2c auto recovery timeout counter (0xC6)
+ * I2CG10[23:16] base clk3 for Standard-mode (100Khz) min tBuf 4.7us
+ * 0x3c : 100.8Khz  : 3.225Mhz                    : 4.96us
+ * 0x3d : 99.2Khz   : 3.174Mhz                    : 5.04us
+ * 0x3e : 97.65Khz  : 3.125Mhz                    : 5.12us
+ * 0x40 : 97.75Khz  : 3.03Mhz                     : 5.28us
+ * 0x41 : 99.5Khz   : 2.98Mhz                     : 5.36us (default)
+ * I2CG10[15:8] base clk2 for Fast-mode (400Khz) min tBuf 1.3us
+ * 0x12 : 400Khz    : 10Mhz                       : 1.6us
+ * I2CG10[7:0] base clk1 for Fast-mode Plus (1Mhz) min tBuf 0.5us
+ * 0x08 : 1Mhz      : 20Mhz                       : 0.8us
+ */
+
+static int aspeed_i2c_global_probe(struct platform_device *pdev)
+{
+	struct aspeed_i2c_new_global *i2c_global;
+	struct resource *res;
+
+	i2c_global = devm_kzalloc(&pdev->dev, sizeof(*i2c_global), GFP_KERNEL);
+	if (IS_ERR(i2c_global))
+		return PTR_ERR(i2c_global);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	i2c_global->base = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(i2c_global->base))
+		return PTR_ERR(i2c_global->base);
+
+	i2c_global->rst = devm_reset_control_get_exclusive(&pdev->dev, NULL);
+	if (IS_ERR(i2c_global->rst))
+		return IS_ERR(i2c_global->rst);
+
+	reset_control_assert(i2c_global->rst);
+	udelay(3);
+	reset_control_deassert(i2c_global->rst);
+
+	writel(ASPEED_I2CG_SLAVE_PKT_NAK | ASPEED_I2CG_CTRL_NEW_REG | ASPEED_I2CG_CTRL_NEW_CLK_DIV,
+	       i2c_global->base + ASPEED_I2CG_CTRL);
+	writel(I2CCG_DIV_CTRL, i2c_global->base + ASPEED_I2CG_CLK_DIV_CTRL);
+
+	pr_info("i2c global registered\n");
+
+	return 0;
+}
+
+static struct platform_driver aspeed_i2c_ic_driver = {
+	.probe  = aspeed_i2c_global_probe,
+	.driver = {
+		.name = KBUILD_MODNAME,
+		.of_match_table = aspeed_i2c_ic_of_match,
+	},
+};
+
+static int __init aspeed_i2c_global_init(void)
+{
+	return platform_driver_register(&aspeed_i2c_ic_driver);
+}
+postcore_initcall(aspeed_i2c_global_init);
+
+MODULE_AUTHOR("Ryan Chen");
+MODULE_DESCRIPTION("ASPEED I2C Global Driver");
+MODULE_LICENSE("GPL v2");
diff -ruNa linux/drivers/i2c/busses/aspeed-i2c-new-global.h linux_n/drivers/i2c/busses/aspeed-i2c-new-global.h
--- linux/drivers/i2c/busses/aspeed-i2c-new-global.h	1970-01-01 08:00:00.000000000 +0800
+++ linux_n/drivers/i2c/busses/aspeed-i2c-new-global.h	2022-04-14 15:21:42.000000000 +0800
@@ -0,0 +1,23 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#ifndef AST2600_I2C_NEW_GLOBAL_H
+#define AST2600_I2C_NEW_GLOBAL_H
+
+#include <linux/bits.h>
+
+#define ASPEED_I2CG_ISR			0x00
+#define ASPEED_I2CG_SLAVE_ISR		0x04	/* ast2600 */
+#define ASPEED_I2CG_OWNER		0x08
+#define ASPEED_I2CG_CTRL		0x0C
+#define ASPEED_I2CG_CLK_DIV_CTRL	0x10	/* ast2600 */
+
+/* 0x0C : I2CG SRAM Buffer Enable  */
+#define ASPEED_I2CG_SRAM_BUFFER_ENABLE	BIT(0)
+
+/* ast2600 */
+#define ASPEED_I2CG_SLAVE_PKT_NAK	BIT(4)
+#define ASPEED_I2CG_M_S_SEPARATE_INTR	BIT(3)
+#define ASPEED_I2CG_CTRL_NEW_REG	BIT(2)
+#define ASPEED_I2CG_CTRL_NEW_CLK_DIV	BIT(1)
+
+#endif /* AST2600_I2C_NEW_GLOBAL_H */
diff -ruNa linux/drivers/i2c/busses/ast2600-i2c-global.c linux_n/drivers/i2c/busses/ast2600-i2c-global.c
--- linux/drivers/i2c/busses/ast2600-i2c-global.c	2022-04-28 21:51:09.526991000 +0800
+++ linux_n/drivers/i2c/busses/ast2600-i2c-global.c	1970-01-01 08:00:00.000000000 +0800
@@ -1,181 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
-/*
- * Aspeed I2C Interrupt Controller.
- *
- * Copyright (C) ASPEED Technology Inc.
- * Ryan Chen <ryan_chen@aspeedtech.com>
- */
-#include <linux/clk.h>
-#include <linux/irq.h>
-#include <linux/irqchip.h>
-#include <linux/irqchip/chained_irq.h>
-#include <linux/irqdomain.h>
-#include <linux/module.h>
-#include <linux/of_platform.h>
-#include <linux/platform_device.h>
-#include <linux/of_address.h>
-#include <linux/of_irq.h>
-#include <linux/io.h>
-#include <linux/reset.h>
-#include <linux/delay.h>
-#include <linux/clk-provider.h>
-#include "ast2600-i2c-global.h"
-
-struct aspeed_i2c_ic {
-	void __iomem		*base;
-	int			parent_irq;
-	u32			i2c_irq_mask;
-	struct reset_control	*rst;
-	struct irq_domain	*irq_domain;
-	int			bus_num;
-};
-
-static const struct of_device_id aspeed_i2c_ic_of_match[] = {
-	{ .compatible = "aspeed,ast2600-i2c-global", .data = (void *)0},
-	{ }
-};
-MODULE_DEVICE_TABLE(of, aspeed_i2c_ic_of_match);
-
-struct aspeed_i2c_base_clk {
-	const char	*name;
-	unsigned long	base_freq;
-};
-
-#define BASE_CLK_COUNT 4
-
-static const struct aspeed_i2c_base_clk i2c_base_clk[BASE_CLK_COUNT] = {
-	/* name	target_freq */
-	{  "base_clk3",	20000000 },	/* 20M */
-	{  "base_clk2",	10000000 },	/* 10M */
-	{  "base_clk1",	3250000 },	/* 3.25M */
-	{  "base_clk0",	1000000 },	/* 1M */
-};
-
-static u32 aspeed_i2c_ic_get_new_clk_divider(unsigned long base_clk, struct device_node *node)
-{
-	struct clk_hw_onecell_data *onecell;
-	unsigned long base_freq;
-	u32 clk_divider = 0;
-	struct clk_hw *hw;
-	int err;
-	int i;
-	int j;
-
-	onecell = kzalloc(sizeof(*onecell) +
-			  (BASE_CLK_COUNT * sizeof(struct clk_hw *)),
-			  GFP_KERNEL);
-
-	if (!onecell) {
-		pr_err("allocate clk_hw\n");
-		return 0;
-	}
-
-	onecell->num = BASE_CLK_COUNT;
-
-	pr_debug("base_clk %ld\n", base_clk);
-	for (j = 0; j < BASE_CLK_COUNT; j++) {
-		pr_debug("target clk : %ld\n", i2c_base_clk[j].base_freq);
-		for (i = 0; i < 0xff; i++) {
-			/*
-			 * i maps to div:
-			 * 0x00: div 1
-			 * 0x01: div 1.5
-			 * 0x02: div 2
-			 * 0x03: div 2.5
-			 * 0x04: div 3
-			 * ...
-			 * 0xFE: div 128
-			 * 0xFF: div 128.5
-			 */
-			base_freq = base_clk * 2 / (2 + i);
-			if (base_freq <= i2c_base_clk[j].base_freq)
-				break;
-		}
-		pr_info("i2cg - %s : %ld\n", i2c_base_clk[j].name, base_freq);
-		hw = clk_hw_register_fixed_rate(NULL, i2c_base_clk[j].name, NULL, 0, base_freq);
-		if (IS_ERR(hw)) {
-			pr_err("failed to register input clock: %ld\n", PTR_ERR(hw));
-			break;
-		}
-		onecell->hws[j] = hw;
-		clk_divider |= (i << (8 * j));
-	}
-
-	err = of_clk_add_hw_provider(node, of_clk_hw_onecell_get, onecell);
-	if (err)
-		pr_err("failed to add i2c base clk provider: %d\n", err);
-
-	return clk_divider;
-}
-
-static int aspeed_i2c_global_probe(struct platform_device *pdev)
-{
-	struct device_node *node = pdev->dev.of_node;
-	unsigned long	parent_clk_frequency;
-	struct aspeed_i2c_ic *i2c_ic;
-	struct clk *parent_clk;
-	struct resource *res;
-	u32 clk_divider;
-
-	pr_info("i2c global probe !\n");
-
-	i2c_ic = devm_kzalloc(&pdev->dev, sizeof(*i2c_ic), GFP_KERNEL);
-	if (IS_ERR(i2c_ic))
-		return PTR_ERR(i2c_ic);
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	i2c_ic->base = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(i2c_ic->base))
-		return PTR_ERR(i2c_ic->base);
-
-	i2c_ic->bus_num = (int)device_get_match_data(&pdev->dev);
-	if (i2c_ic->bus_num) {
-		i2c_ic->parent_irq = platform_get_irq(pdev, 0);
-		if (i2c_ic->parent_irq < 0)
-			return i2c_ic->parent_irq;
-	}
-
-	i2c_ic->rst = devm_reset_control_get_exclusive(&pdev->dev, NULL);
-	if (IS_ERR(i2c_ic->rst)) {
-		dev_dbg(&pdev->dev,
-			"missing or invalid reset controller device tree entry");
-	} else {
-		/* SCU I2C Reset */
-		reset_control_assert(i2c_ic->rst);
-		udelay(3);
-		reset_control_deassert(i2c_ic->rst);
-	}
-
-	/* ast2600 init */
-	writel(ASPEED_I2CG_SLAVE_PKT_NAK | ASPEED_I2CG_CTRL_NEW_REG | ASPEED_I2CG_CTRL_NEW_CLK_DIV,
-	       i2c_ic->base + ASPEED_I2CG_CTRL);
-	parent_clk = devm_clk_get(&pdev->dev, NULL);
-	if (IS_ERR(parent_clk))
-		return PTR_ERR(parent_clk);
-	parent_clk_frequency = clk_get_rate(parent_clk);
-	pr_debug("parent_clk_frequency %ld\n", parent_clk_frequency);
-	clk_divider = aspeed_i2c_ic_get_new_clk_divider(parent_clk_frequency, node);
-	writel(clk_divider, i2c_ic->base + ASPEED_I2CG_CLK_DIV_CTRL);
-
-	pr_info("i2c global registered \n");
-
-	return 0;
-}
-
-static struct platform_driver aspeed_i2c_ic_driver = {
-	.probe  = aspeed_i2c_global_probe,
-	.driver = {
-		.name = KBUILD_MODNAME,
-		.of_match_table = aspeed_i2c_ic_of_match,
-	},
-};
-
-static int __init aspeed_i2c_global_init(void)
-{
-	return platform_driver_register(&aspeed_i2c_ic_driver);
-}
-postcore_initcall(aspeed_i2c_global_init);
-
-MODULE_AUTHOR("Ryan Chen");
-MODULE_DESCRIPTION("ASPEED I2C Global Driver");
-MODULE_LICENSE("GPL v2");
diff -ruNa linux/drivers/i2c/busses/ast2600-i2c-global.h linux_n/drivers/i2c/busses/ast2600-i2c-global.h
--- linux/drivers/i2c/busses/ast2600-i2c-global.h	2022-04-28 21:51:08.318991000 +0800
+++ linux_n/drivers/i2c/busses/ast2600-i2c-global.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,27 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- *	Copyright (C) ASPEED Technology Inc.
- *	Ryan Chen <ryan_chen@aspeedtech.com>
- */
-
-#ifndef AST2600_I2C_GLOBAL_H
-#define AST2600_I2C_GLOBAL_H
-
-#include <linux/bits.h>
-
-#define ASPEED_I2CG_ISR				0x00
-#define ASPEED_I2CG_SLAVE_ISR		0x04	/* ast2600 */
-#define ASPEED_I2CG_OWNER			0x08
-#define ASPEED_I2CG_CTRL			0x0C
-#define ASPEED_I2CG_CLK_DIV_CTRL	0x10	/* ast2600 */
-
-/* 0x0C : I2CG SRAM Buffer Enable  */
-#define ASPEED_I2CG_SRAM_BUFFER_ENABLE		BIT(0)
-
-/* ast2600 */
-#define ASPEED_I2CG_SLAVE_PKT_NAK		BIT(4)
-#define ASPEED_I2CG_M_S_SEPARATE_INTR	BIT(3)
-#define ASPEED_I2CG_CTRL_NEW_REG		BIT(2)
-#define ASPEED_I2CG_CTRL_NEW_CLK_DIV	BIT(1)
-
-#endif /* AST2600_I2C_GLOBAL_H */
diff -ruNa linux/drivers/i2c/busses/i2c-new-aspeed.c linux_n/drivers/i2c/busses/i2c-new-aspeed.c
--- linux/drivers/i2c/busses/i2c-new-aspeed.c	2022-04-29 17:32:17.309394000 +0800
+++ linux_n/drivers/i2c/busses/i2c-new-aspeed.c	2022-04-28 11:14:51.370907000 +0800
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
- * I2C driver for the Aspeed SoC
+ * ASPEED New I2C controller for the Aspeed AST2600 SoCS
  *
  * Copyright (C) ASPEED Technology Inc.
  * Ryan Chen <ryan_chen@aspeedtech.com>
@@ -21,7 +21,7 @@
 #include <linux/of_device.h>
 #include <linux/dma-mapping.h>
 #include <linux/i2c-smbus.h>
-#include "ast2600-i2c-global.h"
+#include "aspeed-i2c-new-global.h"
 
 /***************************************************************************/
 /* AST2600 reg */
@@ -361,6 +361,7 @@
 	{ 3072, 0x00000300 | (0x7) | (0xb << 20) | (0xb << 16) | (0xb << 12) },
 };
 
+
 extern int i2c_slave_state[MAX_I2C_ADAPTERS] = {0};
 
 static u32 aspeed_select_i2c_clock(struct aspeed_new_i2c_bus *i2c_bus)
@@ -399,7 +400,7 @@
 			divisor = DIV_ROUND_UP(base_clk2, i2c_bus->bus_frequency);
 		} else if ((base_clk3 / i2c_bus->bus_frequency) <= 32) {
 			baseclk_idx = 3;
-			divisor = base_clk3 / i2c_bus->bus_frequency;
+			divisor = DIV_ROUND_UP(base_clk3, i2c_bus->bus_frequency);
 		} else {
 			baseclk_idx = 4;
 			divisor = DIV_ROUND_UP(base_clk4, i2c_bus->bus_frequency);
@@ -411,6 +412,7 @@
 			}
 			divisor += inc;
 		}
+		divisor = min_t(int, divisor, 32);
 		baseclk_idx &= 0xf;
 		scl_low = ((divisor * 9) / 16) - 1;
 		scl_low = min_t(u32, scl_low, 0xf);
@@ -821,14 +823,9 @@
 		dev_dbg(i2c_bus->dev, "S : Sr|D\n");
 		byte_data = AST_I2CC_GET_RX_BUFF(readl(i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF));
 		dev_dbg(i2c_bus->dev, "addr : [%02x]", byte_data);
-		ier = readl(i2c_bus->reg_base + AST_I2CS_IER);
-		ier  &= ~(AST_I2CS_RX_DONE | AST_I2CS_SLAVE_MATCH); 
-		sts &= ~ ( AST_I2CS_SLAVE_MATCH | AST_I2CS_RX_DONE | AST_I2CS_WAIT_TX_DMA );
-		writel(ier, i2c_bus->reg_base + AST_I2CS_IER);
 		i2c_slave_event(i2c_bus->slave, I2C_SLAVE_READ_REQUESTED, &byte_data);
-		//dev_dbg(i2c_bus->dev, "tx: [%02x]\n", byte_data);
-		//writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
-		
+		dev_dbg(i2c_bus->dev, "tx: [%02x]\n", byte_data);
+		writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
 		break;
 	case AST_I2CS_TX_ACK | AST_I2CS_WAIT_TX_DMA:
 		cmd |= AST_I2CS_TX_CMD;
@@ -838,21 +835,8 @@
 		writel(byte_data, i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF);
 		break;
 	case AST_I2CS_STOP:
-	case AST_I2CS_RX_DONE | AST_I2CS_RX_DONE_NAK | AST_I2CS_STOP:
 	case AST_I2CS_STOP | AST_I2CS_TX_NAK:
-		dev_dbg(i2c_bus->dev, "S : P \n");
-		value = sts ;
-		dev_dbg(i2c_bus->dev, "value=%x \n",value);
-		if(sts & AST_I2CS_RX_DONE)
-		{
-			dev_dbg(i2c_bus->dev, "S : D \n");
-			byte_data = AST_I2CC_GET_RX_BUFF(readl(i2c_bus->reg_base + AST_I2CC_STS_AND_BUFF));
-			i2c_slave_event(i2c_bus->slave, I2C_SLAVE_WRITE_RECEIVED, &byte_data);
-			dev_dbg(i2c_bus->dev, "rx [%x]", byte_data);
-		}
-		if(sts & AST_I2CS_RX_DONE_NAK)
-			dev_dbg(i2c_bus->dev, "rx: NACK\n");
-
+		dev_dbg(i2c_bus->dev, "S : P\n");
 		i2c_slave_event(i2c_bus->slave, I2C_SLAVE_STOP, &value);
 		break;
 	default:
@@ -1696,7 +1680,7 @@
 
 	if (of_property_read_bool(pdev->dev.of_node, "smbus-alert")) {
 		i2c_bus->alert_enable = 1;
-		i2c_bus->ara = i2c_setup_smbus_alert(&i2c_bus->adap, &i2c_bus->alert_data);
+		i2c_bus->ara = i2c_new_smbus_alert_device(&i2c_bus->adap, &i2c_bus->alert_data);
 		if (!i2c_bus->ara)
 			dev_warn(i2c_bus->dev, "Failed to register ARA client\n");
 
@@ -1780,5 +1764,5 @@
 
 EXPORT_SYMBOL(i2c_slave_state);
 MODULE_AUTHOR("Ryan Chen <ryan_chen@aspeedtech.com>");
-MODULE_DESCRIPTION("ASPEED I2C New Mode Bus Driver");
+MODULE_DESCRIPTION("ASPEED I2C New Register Controller Driver");
 MODULE_LICENSE("GPL v2");
diff -ruNa linux/drivers/i2c/busses/Makefile linux_n/drivers/i2c/busses/Makefile
--- linux/drivers/i2c/busses/Makefile	2022-04-29 19:11:36.649277000 +0800
+++ linux_n/drivers/i2c/busses/Makefile	2022-04-28 11:02:47.818921000 +0800
@@ -34,8 +34,8 @@
 # Embedded system I2C/SMBus host controller drivers
 obj-$(CONFIG_I2C_ALTERA)	+= i2c-altera.o
 obj-$(CONFIG_I2C_AMD_MP2)	+= i2c-amd-mp2-pci.o i2c-amd-mp2-plat.o
-obj-$(CONFIG_I2C_ASPEED)        += irq-aspeed-i2c-ic.o i2c-aspeed.o
-obj-$(CONFIG_I2C_NEW_ASPEED)	+= i2c-new-aspeed.o ast2600-i2c-global.o
+obj-$(CONFIG_I2C_ASPEED)	+= i2c-aspeed.o
+obj-$(CONFIG_I2C_NEW_ASPEED)	+= aspeed-i2c-new-global.o i2c-new-aspeed.o
 obj-$(CONFIG_I2C_AT91)		+= i2c-at91.o
 i2c-at91-objs			:= i2c-at91-core.o i2c-at91-master.o
 ifeq ($(CONFIG_I2C_AT91_SLAVE_EXPERIMENTAL),y)
diff -ruNa linux/drivers/i2c/i2c-core-base.c linux_n/drivers/i2c/i2c-core-base.c
--- linux/drivers/i2c/i2c-core-base.c	2022-04-29 17:32:17.237394000 +0800
+++ linux_n/drivers/i2c/i2c-core-base.c	2022-04-28 11:14:54.338907000 +0800
@@ -786,11 +786,11 @@
 
 	i2c_dev_set_name(adap, client, info);
 
-	if (info->properties) {
-		status = device_add_properties(&client->dev, info->properties);
+	if (info->swnode) {
+		status = device_add_software_node(&client->dev, info->swnode);
 		if (status) {
 			dev_err(&adap->dev,
-				"Failed to add properties to client %s: %d\n",
+				"Failed to add software node to client %s: %d\n",
 				client->name, status);
 			goto out_err_put_of_node;
 		}
@@ -798,16 +798,15 @@
 
 	status = device_register(&client->dev);
 	if (status)
-		goto out_free_props;
+		goto out_remove_swnode;
 
 	dev_dbg(&adap->dev, "client [%s] registered with bus id %s\n",
 		client->name, dev_name(&client->dev));
 
 	return client;
 
-out_free_props:
-	if (info->properties)
-		device_remove_properties(&client->dev);
+out_remove_swnode:
+	device_remove_software_node(&client->dev);
 out_err_put_of_node:
 	of_node_put(info->of_node);
 out_err:
@@ -862,6 +861,7 @@
 
 	if (ACPI_COMPANION(&client->dev))
 		acpi_device_clear_enumerated(ACPI_COMPANION(&client->dev));
+	device_remove_software_node(&client->dev);
 	device_unregister(&client->dev);
 }
 EXPORT_SYMBOL_GPL(i2c_unregister_device);
diff -ruNa linux/drivers/i2c/i2c-core-smbus.c linux_n/drivers/i2c/i2c-core-smbus.c
--- linux/drivers/i2c/i2c-core-smbus.c	2022-04-29 17:32:16.405394000 +0800
+++ linux_n/drivers/i2c/i2c-core-smbus.c	2022-04-28 13:02:31.186781000 +0800
@@ -681,6 +681,33 @@
 EXPORT_SYMBOL(i2c_smbus_read_i2c_block_data_or_emulated);
 
 /**
+ * i2c_new_smbus_alert_device - get ara client for SMBus alert support
+ * @adapter: the target adapter
+ * @setup: setup data for the SMBus alert handler
+ * Context: can sleep
+ *
+ * Setup handling of the SMBus alert protocol on a given I2C bus segment.
+ *
+ * Handling can be done either through our IRQ handler, or by the
+ * adapter (from its handler, periodic polling, or whatever).
+
+ *
+ * This returns the ara client, which should be saved for later use with
+ * i2c_handle_smbus_alert() and ultimately i2c_unregister_device(); or an
+ * ERRPTR to indicate an error.
+ */
+struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *adapter,
+					      struct i2c_smbus_alert_setup *setup)
+{
+	struct i2c_board_info ara_board_info = {
+		I2C_BOARD_INFO("smbus_alert", 0x0c),
+		.platform_data = setup,
+	};
+
+	return i2c_new_client_device(adapter, &ara_board_info);
+}
+EXPORT_SYMBOL_GPL(i2c_new_smbus_alert_device);
+/**
  * i2c_setup_smbus_alert - Setup SMBus alert support
  * @adapter: the target adapter
  * @setup: setup data for the SMBus alert handler
@@ -711,7 +738,6 @@
 	return i2c_new_device(adapter, &ara_board_info);
 }
 EXPORT_SYMBOL_GPL(i2c_setup_smbus_alert);
-
 #if IS_ENABLED(CONFIG_I2C_SMBUS) && IS_ENABLED(CONFIG_OF)
 int of_i2c_setup_smbus_alert(struct i2c_adapter *adapter)
 {
diff -ruNa linux/include/linux/i2c.h linux_n/include/linux/i2c.h
--- linux/include/linux/i2c.h	2022-04-29 17:32:17.237394000 +0800
+++ linux_n/include/linux/i2c.h	2022-04-28 11:24:32.982895000 +0800
@@ -443,6 +443,7 @@
 	void		*platform_data;
 	struct device_node *of_node;
 	struct fwnode_handle *fwnode;
+	const struct software_node *swnode;
 	const struct property_entry *properties;
 	const struct resource *resources;
 	unsigned int	num_resources;
diff -ruNa linux/include/linux/i2c-smbus.h linux_n/include/linux/i2c-smbus.h
--- linux/include/linux/i2c-smbus.h	2021-06-03 14:59:17.000000000 +0800
+++ linux_n/include/linux/i2c-smbus.h	2022-04-28 12:59:42.202784000 +0800
@@ -31,6 +31,8 @@
 	int			irq;
 };
 
+struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *adapter,
+                          struct i2c_smbus_alert_setup *setup);
 struct i2c_client *i2c_setup_smbus_alert(struct i2c_adapter *adapter,
 					 struct i2c_smbus_alert_setup *setup);
 int i2c_handle_smbus_alert(struct i2c_client *ara);
diff -ruNa linux/include/linux/property.h linux_n/include/linux/property.h
--- linux/include/linux/property.h	2021-06-03 14:59:17.000000000 +0800
+++ linux_n/include/linux/property.h	2022-04-28 12:38:39.362809000 +0800
@@ -431,7 +431,8 @@
 int software_node_register(const struct software_node *node);
 
 int software_node_notify(struct device *dev, unsigned long action);
-
+int device_add_software_node(struct device *dev, const struct software_node *node);
+void device_remove_software_node(struct device *dev);
 struct fwnode_handle *
 fwnode_create_software_node(const struct property_entry *properties,
 			    const struct fwnode_handle *parent);
